import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter/foundation.dart';
import 'package:under_control_flutter/models/app_user.dart';
import 'package:under_control_flutter/models/item.dart';

class ItemProvider with ChangeNotifier {
  List<Item> _items = [];

  AppUser? user;

  ItemProvider();

  ItemProvider.user({this.user});

  // returns a copy of items list
  List<Item> get items {
    return [..._items];
  }

  // add new item to DB
  Future<void> addNewItem(Item item) async {
    await FirebaseFirestore.instance
        .collection('companies')
        .doc(user!.companyId)
        .collection('items')
        .add({
      'internalId': item.internalId,
      'producer': item.producer,
      'model': item.model,
      'category': item.category,
      'inspectionStatus': item.inspectionStatus,
      'lastInspection': item.lastInspection.toIso8601String(),
      'interval': item.interval,
    }).then((autogeneratedId) {
      item.setAutogeneratedId(autogeneratedId.id);
      _items.add(item);
      print('adding item   $_items');
      notifyListeners();
    }).catchError(
      (e) => throw Exception('Connection error. Please try later...'),
    );
  }

  Future<void> fetchAndSetItems() async {
    List<Item> tmpItems = [];
    await FirebaseFirestore.instance
        .collection('companies')
        .doc(user!.companyId)
        .collection('items')
        .orderBy('category')
        .get()
        .then((QuerySnapshot querySnapshot) {
      for (var doc in querySnapshot.docs) {
        tmpItems.add(
          Item(
            itemId: doc.id,
            internalId: doc['internalId'],
            producer: doc['producer'],
            model: doc['model'],
            category: doc['category'],
            lastInspection: DateTime.parse(doc['lastInspection']),
            interval: doc['interval'],
            inspectionStatus: doc['inspectionStatus'],
          ),
        );
      }

      _items = tmpItems;
      print('fetch');
      // notifyListeners();
      return _items;
    });
  }
}
